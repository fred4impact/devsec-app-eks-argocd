pipeline {
    agent any 
    tools {
        nodejs 'nodejs'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO2')
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git(
                    branch: 'main',
                    credentialsId: 'GITHUB',
                    url: 'https://github.com/fred4impact/devsec-app-eks-argocd.git'
                )
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                dir('Project-code/backend') {
                    withSonarQubeEnv('sonar-server') {
                        sh '''$SCANNER_HOME/bin/sonar-scanner \
                              -Dsonar.projectKey=three-tier-backend \
                              -Dsonar.sources=. \
                              -Dsonar.host.url=http://98.83.234.205:9000 \
                              -Dsonar.login=squ_fc8ffb94e765d3c25d315471affca7bad3c1c374'''
                    }
                }
            }
        }

        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }

        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('Project-code/backend') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }

        stage('Trivy File Scan') {
            steps {
                dir('Project-code/backend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }

        stage('Docker Image Build') {
            steps {
                script {
                    dir('Project-code/backend') {
                        sh 'docker system prune -f'
                        sh 'docker container prune -f'
                        sh 'ls -al'
                        sh 'docker build -t ${AWS_ECR_REPO_NAME} .'
                    }
                }
            }
        }

        stage('ECR Image Pushing') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-key'
                ]]) {
                    script {
                        sh '''
                            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com
                            docker tag ${AWS_ECR_REPO_NAME} ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}
                            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}
                        '''
                    }
                }
            }
        }

        stage('TRIVY Image Scan') {
            steps {
                sh 'trivy image ${AWS_ECR_REPO_NAME} > trivyimage.txt'
            }
        }

        stage('Checkout Code') {
            steps {
                git(
                    branch: 'main',
                    credentialsId: 'GITHUB',
                    url: 'https://github.com/fred4impact/devsec-app-eks-argocd.git'
                )
            }
        }

  stage('Update Deployment file') {
    environment {
        IMAGE_TAG     = "${BUILD_NUMBER}"
        GIT_REPO_NAME = "devsec-app-eks-argocd"
        GIT_USER_NAME = "fred4impact"
    }
    steps {
        dir('k8s-manifests/Backend') {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                script {
                    def repoUrl = "https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git"
                    sh """
                        git config user.email "runtesting4me@gmail.com"
                        git config user.name "fred4impact"

                        echo "[INFO] Updating image tag on line 28 only..."
                        sed -i "28s|\\(image: [^:]*:\\)[^ ]*|\\1${BUILD_NUMBER}|" deployment.yaml

                        git add deployment.yaml
                        git commit -m "Update backend image to tag ${BUILD_NUMBER}" || echo "[INFO] No changes to commit."

                        git remote set-url origin ${repoUrl}
                        git push origin main
                    """
                }
            }
        }
    }
}


    }
}
