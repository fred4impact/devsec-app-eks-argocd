pipeline {
    agent any 
    tools {
        nodejs 'nodejs'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO2')
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', credentialsId: 'GITHUB', url: 'https://github.com/fred4impact/devsec-app-eks-argocd.git'
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                dir('Project-code/backend') {
                    withSonarQubeEnv('sonar-server') {
                        sh '''$SCANNER_HOME/bin/ sonar-scanner \
                                -Dsonar.projectKey=three-tier-backend \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=http://54.198.203.221:9000 \
                                -Dsonar.login=squ_8494ffffe7e3b5dee20a34b8fd2402ad0ce1bd23a'''
                    }
                }
            }
        }
        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            }
        }
        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('Project-code/backend') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }
        stage('Trivy File Scan') {
            steps {
                dir('Project-code/backend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }
        stage("Docker Image Build") {
            steps {
                script {
                    dir('Project-code/backend') {
                        sh 'docker system prune -f'
                        sh 'docker container prune -f'
                        sh 'ls -al' // Ensure Dockerfile exists
                        sh 'docker build -t ${AWS_ECR_REPO_NAME} .'
                    }
                }
            }
        }
        stage("ECR Image Pushing") {
            steps {
                script {
                    sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}'
                    sh 'docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                    sh 'docker push ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                }
            }
        }
        stage("TRIVY Image Scan") {
            steps {
                withCredentials([string(credentialsId: 'ACCOUNT_ID', variable: 'AWS_ACCOUNT_ID'), 
                                 string(credentialsId: 'ECR_REPO2', variable: 'AWS_ECR_REPO_NAME')]) {
                    sh 'trivy image "${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}" > trivyimage.txt'
                }
            }
        }
        stage('Checkout Code') {
            steps {
                git branch: 'main', credentialsId: 'GITHUB', url: 'https://github.com/fred4impact/devsec-app-eks-argocd.git'
            }
        }
        stage('Update Deployment file') {
            steps {
                script {
                    def imageTag = "${BUILD_NUMBER}" // Define imageTag
                    dir('K8s-manifests/Backend') {
                        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                            sh '''
                                git config user.email "runtesting4me@gmail.com"
                                git config user.name "fred4impact"
                                sed -i "s/${AWS_ECR_REPO_NAME}:${imageTag}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}/" deployment.yaml
                                git add deployment.yaml
                                git commit -m "Update deployment Image to version ${BUILD_NUMBER}"
                                git push https://${GITHUB_TOKEN}@github.com/fred4impact/adevsec-app-eks-argocd HEAD:main
                            '''
                        }
                    }
                }
            }
        }
    }
}
